# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - v1.*

pool:
  vmImage: 'ubuntu-latest'

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
  - task: Cache@2
    inputs:
      key: 'gradle | "$(Agent.OS)"'
      restoreKeys: gradle
      path: $(GRADLE_USER_HOME)
    displayName: Gradle build cache

  - task: Gradle@2
    inputs:
      gradleWrapperFile: 'gradlew'
      jdkVersionOption: '11'
      tasks: 'buildPlugin'
    displayName: 'Build plugin'

  - task: Gradle@2
    inputs:
      gradleWrapperFile: 'gradlew'
      jdkVersionOption: '11'
      tasks: 'runPluginVerifier'
    displayName: 'Verify plugin'

  - task: GitHubRelease@0
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: 'GitHub Release'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      assets: 'build/distributions/*.zip'
      assetUploadMode: 'delete'
      tagSource: 'auto'
      target: '$(Build.SourceVersion)'
    displayName: 'Publish to GitHub Release'

  - task: Gradle@2
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gradleWrapperFile: 'gradlew'
      jdkVersionOption: '11'
      options: '-Djetbrains.username=$(jetbrains.username) -Djetbrains.token=$(jetbrains.token)'
      tasks: 'publishPlugin'
    displayName: 'Publish to JetBrains Plugin Repository'